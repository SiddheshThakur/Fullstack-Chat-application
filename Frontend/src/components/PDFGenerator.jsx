import React, { useState, useRef } from 'react';
import { usePDFGeneration, PDFUtils, PDFAPIUtils } from '../utils/pdfUtils';
import { Download, FileText, MessageSquare, Image } from 'lucide-react';

const PDFGenerator = ({ chatData, currentUser }) => {
  const [loading, setLoading] = useState(false);
  const [useServer, setUseServer] = useState(false);
  const chatElementRef = useRef(null);
  const { generateAndDownloadChatPDF, generateAndDownloadTextPDF, generateAndDownloadElementPDF } = usePDFGeneration();

  // Sample chat data for demonstration
  const sampleChatData = {
    title: 'Sample Chat Conversation',
    participants: ['Alice', 'Bob', 'Charlie'],
    messages: [
      {
        sender: 'Alice',
        senderName: 'Alice Johnson',
        text: 'Hello everyone! How are you doing today?',
        timestamp: new Date().toISOString()
      },
      {
        sender: 'Bob',
        senderName: 'Bob Smith',
        text: 'Hey Alice! I\'m doing great, thanks for asking. Just finished a big project at work.',
        timestamp: new Date(Date.now() - 300000).toISOString()
      },
      {
        sender: 'Charlie',
        senderName: 'Charlie Brown',
        text: 'Hi guys! I\'m good too. Anyone wants to grab coffee later?',
        timestamp: new Date(Date.now() - 600000).toISOString()
      }
    ]
  };

  const handleGenerateChatPDF = async () => {
    setLoading(true);
    try {
      const dataToUse = chatData || sampleChatData;
      await generateAndDownloadChatPDF(dataToUse, useServer);
    } catch (error) {
      console.error('Error generating chat PDF:', error);
      alert('Failed to generate chat PDF. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateTextPDF = async () => {
    setLoading(true);
    try {
      const sampleText = `This is a sample text document.
      
It contains multiple paragraphs and demonstrates how text content can be converted to PDF.

Key features:
- Automatic text wrapping
- Multiple page support
- Custom formatting options
- Professional appearance

This PDF was generated using our PDF generation utility.`;

      await generateAndDownloadTextPDF(sampleText, {
        title: 'Sample Text Document',
        fontSize: 12,
        filename: 'sample_text.pdf'
      }, useServer);
    } catch (error) {
      console.error('Error generating text PDF:', error);
      alert('Failed to generate text PDF. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateElementPDF = async () => {
    setLoading(true);
    try {
      if (chatElementRef.current) {
        await generateAndDownloadElementPDF(chatElementRef.current, {
          filename: 'chat_screenshot.pdf',
          format: 'a4',
          orientation: 'portrait'
        });
      }
    } catch (error) {
      console.error('Error generating element PDF:', error);
      alert('Failed to generate element PDF. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateCustomHTML = async () => {
    setLoading(true);
    try {
      const htmlContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>Custom HTML Document</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .header { background: #007bff; color: white; padding: 20px; text-align: center; }
              .content { margin: 20px 0; }
              .footer { border-top: 1px solid #ccc; padding-top: 20px; text-align: center; }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Custom HTML Document</h1>
              <p>Generated on ${new Date().toLocaleString()}</p>
            </div>
            <div class="content">
              <h2>Overview</h2>
              <p>This is a custom HTML document that has been converted to PDF using our server-side PDF generation service.</p>
              
              <h2>Features</h2>
              <ul>
                <li>Custom CSS styling</li>
                <li>Professional layout</li>
                <li>Server-side rendering</li>
                <li>High-quality output</li>
              </ul>
              
              <h2>Use Cases</h2>
              <p>This type of PDF generation is perfect for:</p>
              <ol>
                <li>Reports and documentation</li>
                <li>Invoices and receipts</li>
                <li>Certificates and letters</li>
                <li>Any custom formatted content</li>
              </ol>
            </div>
            <div class="footer">
              <p>Generated by PDF Generator Service</p>
            </div>
          </body>
        </html>
      `;

      const blob = await PDFAPIUtils.generateFromHTML(htmlContent);
      PDFAPIUtils.downloadBlob(blob, 'custom_html_document.pdf');
    } catch (error) {
      console.error('Error generating custom HTML PDF:', error);
      alert('Failed to generate custom HTML PDF. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-6 text-gray-800">PDF Generator</h2>
      
      {/* Server/Client Toggle */}
      <div className="mb-6">
        <label className="flex items-center space-x-2">
          <input
            type="checkbox"
            checked={useServer}
            onChange={(e) => setUseServer(e.target.checked)}
            className="checkbox checkbox-primary"
          />
          <span className="text-sm">Use server-side generation (higher quality)</span>
        </label>
      </div>

      {/* PDF Generation Options */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <button
          onClick={handleGenerateChatPDF}
          disabled={loading}
          className="btn btn-primary flex items-center space-x-2"
        >
          <MessageSquare size={20} />
          <span>{loading ? 'Generating...' : 'Generate Chat PDF'}</span>
        </button>

        <button
          onClick={handleGenerateTextPDF}
          disabled={loading}
          className="btn btn-secondary flex items-center space-x-2"
        >
          <FileText size={20} />
          <span>{loading ? 'Generating...' : 'Generate Text PDF'}</span>
        </button>

        <button
          onClick={handleGenerateElementPDF}
          disabled={loading}
          className="btn btn-accent flex items-center space-x-2"
        >
          <Image size={20} />
          <span>{loading ? 'Generating...' : 'Screenshot PDF'}</span>
        </button>

        <button
          onClick={handleGenerateCustomHTML}
          disabled={loading}
          className="btn btn-info flex items-center space-x-2"
        >
          <Download size={20} />
          <span>{loading ? 'Generating...' : 'Custom HTML PDF'}</span>
        </button>
      </div>

      {/* Chat Preview for Screenshot */}
      <div className="border rounded-lg p-4 bg-gray-50" ref={chatElementRef}>
        <h3 className="font-semibold mb-3 text-gray-700">Chat Preview</h3>
        <div className="space-y-2">
          {(chatData?.messages || sampleChatData.messages).slice(0, 3).map((message, index) => (
            <div
              key={index}
              className={`p-3 rounded-lg max-w-sm ${
                message.sender === 'me' || message.sender === currentUser?.username
                  ? 'bg-blue-500 text-white ml-auto'
                  : 'bg-white text-gray-800'
              }`}
            >
              <div className="text-xs opacity-75 mb-1">
                {message.senderName || message.sender}
              </div>
              <div className="text-sm">{message.text}</div>
              <div className="text-xs opacity-75 mt-1">
                {message.timestamp ? new Date(message.timestamp).toLocaleTimeString() : 'Just now'}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Usage Instructions */}
      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-800 mb-2">Usage Instructions</h3>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>• <strong>Chat PDF:</strong> Generates a formatted PDF of chat conversations</li>
          <li>• <strong>Text PDF:</strong> Converts plain text to a professional PDF document</li>
          <li>• <strong>Screenshot PDF:</strong> Captures the chat preview as an image in PDF</li>
          <li>• <strong>Custom HTML PDF:</strong> Converts HTML content to PDF (server-side only)</li>
          <li>• <strong>Server-side:</strong> Higher quality, supports CSS styling (requires backend)</li>
          <li>• <strong>Client-side:</strong> Faster, works offline, basic formatting</li>
        </ul>
      </div>
    </div>
  );
};

export default PDFGenerator;